

import org.jfree.chart.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.IntervalCategoryDataset;
import org.jfree.data.gantt.Task;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;
		
	//package org.jfree.chart.demo;

		/**
		 * A simple demonstration application showing how to create a Gantt chart.
		 * <P>
		 * This demo is intended to show the conceptual approach rather than being a polished
		 * implementation.
		 *
		 *
		 */
public class GanttDemo1 extends ApplicationFrame {

			/**
			 * Responsible for the creation of the GANTT chart.
			 * **/

			//Initiates the arrays responsible for data collection
			private ArrayList<String> info = new ArrayList<String>();
			private ArrayList<Integer> dayS = new ArrayList<Integer>();
			private ArrayList<Integer> monS = new ArrayList<Integer>();
			private ArrayList<Integer> yearS = new ArrayList<Integer>();
			private ArrayList<Integer> dayE = new ArrayList<Integer>();
			private ArrayList<Integer> monE = new ArrayList<Integer>();
			private ArrayList<Integer> yearE = new ArrayList<Integer>();
			private ArrayList<Integer> thirdValueS = new ArrayList<Integer>();
			private ArrayList<Integer> thirdValueE = new ArrayList<Integer>();
			private ArrayList<Integer> calendarAddS = new ArrayList<Integer>();
			private ArrayList<Integer> calendarAddE = new ArrayList<Integer>();
			private String information1;
			private String dates;
			private boolean hasBool;
			private int day1I, day2I, year1I, year2I;
			// Sentinel value of 'count' is set to 2 to make future arithmetic easier
			private int count = 2;
			private int count1 = 0;
			private int dateConversion;
			private String dateTest1;
			private String dateTest12;
			private String dateToTest1;
			private String dateTest2;
			private String dateTest22;
			private String dateToTest2;
			private String day1;
			private String day2;
			private String year1;
			private String year2;
			private int thirdValue;
			private String currentLine;
			private File origFile = new File("C:\\Users\\Jake\\Documents\\GitHub\\new_coursework\\Test files\\origDocTest.txt");
			private File infoFile = new File("C:\\Users\\Jake\\Documents\\GitHub\\new_coursework\\Test files\\secondaryInfo.txt");
			final TaskSeriesCollection collection = new TaskSeriesCollection();
			//Initiates the file readers responsible for data collection
//			

			//Initiates temporary string variables
			
			public GanttDemo1(final String title) throws FileNotFoundException {

		        super(title);
		        
	
				gatherInfo();
				
		        final IntervalCategoryDataset dataset = createDataset();
		       
		        final JFreeChart chart = createChart(dataset);

		        // add the chart to a panel...
		        final ChartPanel chartPanel = new ChartPanel(chart);
		        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
		        setContentPane(chartPanel);

		    }

			public void gatherInfo() throws FileNotFoundException{
			//Gathers information, performs validation and conversion
				BufferedReader GANTTscan1 = new BufferedReader(new FileReader(origFile));
				BufferedReader GANTTscan2 = new BufferedReader(new FileReader(infoFile));
			try {
			while((currentLine = GANTTscan1.readLine()) != null){
				while((information1 = GANTTscan1.readLine()) != null){
					String[] infoSplitter = information1.split(", ");
					String information1 = infoSplitter[1];
					info.add(information1);
				}}
				
			// 'predecessor' is defined by the user
			// where there is a predecessor, the 'thirdValue' is added to the previous process's end time, and the 'start time' is updated to the end time of the predecessor
			// array of end times
			
			//  Initialises variables for input into the GANTT chart. Information is passed to methods which format the data, and adds to an arrayList
				while((dates = GANTTscan2.readLine()) != null){
					count1 += 1;
					String[] dateSplitter = dates.split(", ");
					String dateTest1 = dateSplitter[0];
					String dateTest2 = dateSplitter[1];
					String[] durationTest = dateSplitter[2].split(" ");
					if(hasPredecessor(dates) == true){
						System.out.println("WOO!");
					}
					int durationAmount = Integer.parseInt(durationTest[0]);
					String durationType = durationTest[1];
					dateInfo(durationAmount, durationType);
					String[] dateTest12 = dateTest1.split("/");
					String[] dateTest22 = dateTest2.split("/");
					day1 = dateTest12[0];
					day2 = dateTest22[0];
					dateToTest1 = dateTest12[1];
					dateToTest2 = dateTest22[1];
					year1 = dateTest12[2];
					year2 = dateTest22[2];
					day1I = Integer.parseInt(day1);
					day2I = Integer.parseInt(day2);
					year1I = Integer.parseInt(year1);
					year2I = Integer.parseInt(year2);
					count += 1;
					numToMonth(dateToTest1);
					count += 1;
					numToMonth(dateToTest2);
					dayS.add(day1I);
					dayE.add(day2I);
					yearS.add(year1I);
					yearE.add(year2I);
					// Sets the file to 
					hasBool = false;
			   }
			} catch (IOException ex){}
			}
			
			// Tests to see if the string being handled has a predecessor, in order to perform arithematic on durations of processes
			public boolean hasPredecessor(String dateInfo){
				
				String[] hasPredecessorTest = dateInfo.split(", ");
				if(hasPredecessorTest.length >= 4){
					hasBool = true;
				} else {
					hasBool = false;
				}
				return hasBool;
			}
			//Case statement for gaining the relative hours of duration, assuming 8 hours of work a day
			public void dateInfo(int duration, String type){
				switch(type.toLowerCase()){
				case "hours": thirdValue = duration;
							break;
				case "days": thirdValue = (24 * duration);
							break;
				case "weeks": thirdValue = ((24 * 7) * duration);
							break;
				case "months": thirdValue = ((24 * (duration * 30)));
							break;
				case "years": thirdValue = (duration * 365);
							break;
				} thirdValueS.add(thirdValue); }
			
			// Conducts a case statement which formats all dates acquired
			public void numToMonth(String date) {
				switch(date){
					case "1": dateConversion = Calendar.JANUARY;
							break;
					case "2": dateConversion = Calendar.FEBRUARY;
							break;
					case "3": dateConversion = Calendar.MARCH;
							break;
					case "4": dateConversion = Calendar.APRIL;
							break;
					case "5": dateConversion = Calendar.MAY;
							break;
					case "6": dateConversion = Calendar.JUNE;
							break;
					case "7": dateConversion = Calendar.JULY;
							break;
					case "8": dateConversion = Calendar.AUGUST;
							break;
					case "9": dateConversion = Calendar.SEPTEMBER;
							break;
					case "10": dateConversion = Calendar.OCTOBER;
							break;
					case "11": dateConversion = Calendar.NOVEMBER;
							break;
					case "12": dateConversion = Calendar.DECEMBER;
							break;
					
					
				}
				if(count%2 == 1){
				calendarAddS.add(dateConversion);
				} else if(count%2 != 1){
				calendarAddE.add(dateConversion);
				}
			}
			
			//catch(FileNotFoundException fe){}
		
			public IntervalCategoryDataset createDataset() {
				final TaskSeries s1 = new TaskSeries("Scheduled");
			
				for(int loop=0; loop<info.size(); loop++){
				
					s1.add(new Task(info.get(loop),
				               	new SimpleTimePeriod(date(dayS.get(loop), Calendar.FEBRUARY, yearS.get(loop), 0),
				                                    date(dayE.get(loop), Calendar.FEBRUARY, yearE.get(loop), thirdValueS.get(loop)))));

				}
				collection.add(s1);
				return collection;				        
				}
			
			//Things to do
			//Create method to convert hours/days/weeks/months to hours, and add to duration accordingly

			
			
		    /**
		     * Utility method for creating <code>Date</code> objects.
		     *
		     * @param day  the date.
		     * @param month  the month.
		     * @param year  the year.
		     *
		     * @return a date.
		     */
		    private static Date date(final int day, final int month, final int year, final int duration) {

		        final Calendar calendar = Calendar.getInstance();
		        calendar.set(year, month, day, duration, duration);
		        final Date result = calendar.getTime();
		        return result;

		    }
		        
		    /**
		     * Creates a chart.
		     * 
		     * @param dataset  the dataset.
		     * 
		     * @return The chart.
		     */
		    private JFreeChart createChart(final IntervalCategoryDataset dataset) {
		        final JFreeChart chart = ChartFactory.createGanttChart(
		            "Gantt Chart Demo",  // chart title
		            "Task",              // domain axis label
		            "Date",              // range axis label
		            dataset,             // data
		            true,                // include legend
		            true,                // tooltips
		            false                // urls
		        );    
//	        chart.getCategoryPlot().getDomainAxis().setMaxCategoryLabelWidthRatio(10.0f);
		        return chart;    
		    }
		    
		    /**
		     * Starting point for the demonstration application.
		     *
		     * @param args  ignored.
		     * @throws FileNotFoundException 
		     */
		    public static void main(final String[] args) throws FileNotFoundException {

		        final GanttDemo1 demo = new GanttDemo1("Gantt Chart Demo 1");
		        demo.pack();
		        RefineryUtilities.centerFrameOnScreen(demo);
		        demo.setVisible(true);

		    }

}