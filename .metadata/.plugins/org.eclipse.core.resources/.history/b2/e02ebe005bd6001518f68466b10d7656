import java.awt.Frame;
import java.awt.image.BufferedImageFilter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.lang.reflect.Array;
import java.util.Scanner;
import org.apache.commons.*;
import org.apache.commons.lang3.StringUtils;

import java.util.ArrayList;
import java.util.Arrays;

import javax.swing.JOptionPane;

public class add {
	
	/** 
	 * Checks to see if the year is the same. If it is not, check to see if the finish date is greater than the start. If not, fail.
	 * Check to see if the month on end is the same as on start. If it isn't, make sure it is greater than the start. Else, fail.
	 * Check to see if the day on end is the same as on start. If it isn't, make sure it is greater. Else, fail.
	 * @param takes values from text boxes to test
	 * @return boolean true or false, which determines if the program should continue
	 * Version 2
	 **/
	public boolean checkForCorrectness(String s, String e, String d){
		
		/**
		 * initialises variables for testing
		 */
		boolean cont = false;
		String[] date1Test = s.split("/");
		String[] date2Test = e.split("/");
		int year1 = Integer.parseInt(date1Test[2]);
		int year2 = Integer.parseInt(date2Test[2]);
		int mon1 = Integer.parseInt(date1Test[1]);
		int mon2 = Integer.parseInt(date2Test[1]);
		int day1 = Integer.parseInt(date1Test[0]);
		int day2 = Integer.parseInt(date2Test[0]);
		/**
		 * Tests inputted fields
		 */
		if (year2 < year1){
			return false; }
		if (year2 > year1){
			return true;
			// Version 2 - checks to see if the duration meets the dates
		}
		if (year2 == year1){
			if(mon2 < mon1){
				return false;}
			else if(mon2 == mon1){
				if(day2 >= day1){
					return true;
				} else if(day2 < day1){
					return false;
			}}else if(mon2 > mon1){
				return true;
				}}
		return false;
	}
	
	public int countNumFullStops(String s){
		int numStops = StringUtils.countMatches(s, ".");
		return numStops;}
	
	/**
	 * Checks to see if the data supplied already exists in the file.
	 */
	public boolean placeCheck(String ID, String desc, String file1, String file2) throws IOException{
		Scanner checkNumber = new Scanner(new FileReader(file1));
		String toTest;
		boolean trueOrNo = true;
		while(checkNumber.hasNext()){
			toTest = checkNumber.next();
	        if(toTest.contains(ID)){
	       	trueOrNo = false;
	       	break;
	        }}
	       	addInfo(ID, desc, file1, file2);
			return trueOrNo;
	      }

	public void addInfo (String ID, String desc, String file1, String file2) throws IOException{
    int filePosCounter = 0;
    String keyInfo =  ID + ", " + "\"" + desc + "\"" ;
	Scanner checkNumber = new Scanner(new FileReader(file1));
	ArrayList<String> key = new ArrayList<String>();
	ArrayList<String> info = new ArrayList<String>();

	String sentInt = "";
	
		/**
		 * Initialises variables once checking has completed
		 */
			BufferedReader b1 = new BufferedReader(new FileReader(file1));
			BufferedReader b2 = new BufferedReader(new FileReader(file2));
			String keyLine;
			String infoLine;
			String testerInt = null;
			while((keyLine = b1.readLine()) != null){
				key.add(keyLine);
			}
			while((infoLine = b2.readLine()) != null){
				info.add(infoLine);
			}
			
			/**
			 * Gathers sentinel value to test the rest of the items's ID with
			 */
			filePosCounter += 1;
			String[] identifier = ID.split("\\.");
			int size = identifier.length;
			String numToTest = identifier[identifier.length-1];
			int numStop = countNumFullStops(ID);
			int Sentsize = identifier.length;
			switch(numStop){
			case 0: sentInt = identifier[Sentsize-1];
					break;
			case 1: sentInt = identifier[Sentsize-2];
					break;
			case 2: sentInt = identifier[Sentsize-3] + "." + identifier[Sentsize-2];
					break;
			case 3: sentInt = identifier[Sentsize-4] + "." + identifier[Sentsize-3] + "." + identifier[Sentsize-2];
					break;
			case 4: sentInt = identifier[Sentsize-5] + "." + identifier[Sentsize-4] + "." + identifier[Sentsize-3] + "." + identifier[Sentsize-2];
					break;
			case 5: sentInt = identifier[Sentsize-6] + "." + identifier[Sentsize-5] + "." + identifier[Sentsize-4] + "." + identifier[Sentsize-3] + "." + identifier[Sentsize-2];
					break;
			}
			
			/**
			 * Compares each item saved in a list to the sentinel variable of the first digit of the ID, having that the numToTest (end digit) is equal to 1
			 */
			if(numToTest.equals("1")){
				int test = key.size();
				for(int add=0; add<test; add++){
					filePosCounter += 1;
					String lineToTest = key.get(add);
					String[] identifierFor1 = lineToTest.split(",");
					String IDTest = identifierFor1[0];
					String[] split = IDTest.split("\\.");
					int size1 = split.length;
					int stopsToTest = countNumFullStops(lineToTest);
					switch(stopsToTest){
					case 0: testerInt = split[size1-1];
							break;
					case 1: testerInt = identifierFor1[size1-2];
							break;
					case 2: testerInt = identifierFor1[size1-3] + "." + identifierFor1[size1-2];
							break;
					case 3: testerInt = identifierFor1[size1-3] + "." + identifierFor1[size1-2] + "." + identifierFor1[size1-1];
							break;
					case 4: testerInt = identifierFor1[size1-4] + "." + identifierFor1[size1-3] + "." + identifierFor1[size1-2] + "." + identifierFor1[size1-1];
							break;
					case 5: testerInt = identifierFor1[size1-5] + "." + identifierFor1[size1-4] + "." + identifierFor1[size1-3] + "." + identifierFor1[size1-2] + "." + identifierFor1[size1-1];
							break;
					if(testerInt.equals(sentInt)){
						key.add(filePosCounter, keyInfo);
					}
					identifierFor1 = null;
					if(testerInt.equals(sentInt)){
					key.add(filePosCounter, keyInfo);
				}
					for(String s:key){
						System.out.println(s);
					}}}
			
			/**
			 * Compares each item saved in a list to the sentinel variable of the first digit of the ID, having that the numToTest (end digit) is greater than 1
			 */
			if(!numToTest.equals("1")){
					for(int add=0; add<key.size()-1; add++){
					String lineToTest = key.get(add);
					testerInt = null;
					String[] tester = lineToTest.split(",", 2);
					String identifierTemp = tester[0];
					String[] identifierTest = identifierTemp.split("\\.");
					int digitToTest = Integer.parseInt(identifierTest[size-1]);
					int stopsToTest = countNumFullStops(identifierTemp);
					switch(stopsToTest){
					case 0: testerInt = identifier[size-1];
							break;
					case 1: testerInt = identifier[size-1];
							break;
					case 2: testerInt = identifier[size-2] + "." + identifier[size-1];
							break;
					case 3: testerInt = identifier[size-3] + "." + identifier[size-2] + "." + identifier[size-1];
							break;
					case 4: testerInt = identifier[size-4] + "." + identifier[size-3] + "." + identifier[size-2] + "." + identifier[size-1];
							break;
					case 5: testerInt = identifier[size-5] + "." + identifier[size-4] + "." + identifier[size-3] + "." + identifier[size-2] + "." + identifier[size-1];
							break;
					}
					if(testerInt.equals(sentInt)){
						key.add(filePosCounter, keyInfo);
						//info.add(filePosCounter, infoLine);
					}
					identifier = null;
					tester = null;
				}}try{
					BufferedWriter writer = new BufferedWriter(new FileWriter(file1));
					int testW = key.size();
					for(int add=0; add<testW; add++){
						writer.write(key.get(add) + "\r\n");
						//writer.write(info.get(add) + "\r\n");
					}
					writer.close();
					} catch(IOException ex){}}}